@startuml sq-system-initialization


title System Initialization Sequence

participant "Application\nHost" as Host
participant "Program.cs" as Program
participant "Configuration\nSystem" as Config
participant "DI Container" as DI
participant "Cosmos Client" as Cosmos
participant "DBServiceConnector" as DB

Host -> Program: Start application
activate Program

Program -> Config: Load appsettings.json
activate Config
Config --> Program: Configuration data
deactivate Config

Program -> DI: AddRazorPages()
Program -> DI: AddScoped<DBServiceConnector>()

Program -> DI: AddSingleton<CosmosClient>()
activate DI
DI -> Cosmos: Create CosmosClient(account, key)
activate Cosmos
Cosmos --> DI: CosmosClient instance
deactivate Cosmos
DI --> Program: Service registered
deactivate DI

Program -> Program: Build application
Program -> Program: Configure middleware

alt Environment.IsDevelopment()
  Program -> Program: UseDeveloperExceptionPage()
else
  Program -> Program: UseExceptionHandler("/Error")
  Program -> Program: UseHsts()
end

Program -> Program: UseHttpsRedirection()
Program -> Program: UseStaticFiles()
Program -> Program: UseRouting()
Program -> Program: UseAuthorization()
Program -> Program: MapRazorPages()

Program -> Program: app.Run()
Program --> Host: Application ready
deactivate Program

note right of Host
  System is now ready
  to serve HTTP requests
end note

@enduml
